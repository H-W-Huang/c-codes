说明：
括号匹配的思路是这样的：
    (1)对于一串字符，设定一个指针在首地址处，设置循环使其后移；
    (2)后移过程中，操作如下：
        A.如果字符不是括号集里的，p后移；
        B.如果字符是左括号( '(', '[' , '{' ),将其 推入栈中；
        C.如果字符是右括号( ')', ']' , '}' ),将其与栈顶元素比较：
            a. 只要一发现不匹配，{ *p==']'&&e=='(',etc. },判定为 不匹配，退出程序；
            b. 若是匹配，e出栈，p后移；
        重复该过程知道栈空；
        ## 过程中会出现这样三种情况： 
            (a) 字符串空时栈恰好也空
            (b) 字符串空而栈不空  （ 对应: [({(   )})  ，左括号多于右括号，while外解决）
            (c) 字符串不空而栈空  （ 对应: [(      )]} ，右括号多于左括号，while内解决）

## 需要 字符指针 来读取字符串；
## 需要 堆栈来存放左括号；